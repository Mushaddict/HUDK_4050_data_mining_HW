---
title: "Untitled"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
library(dplyr)
library(readr)
library(tidyverse)
library(ggplot2)
############ read file
df_label<-read.csv("Student Retention Challenge Data/DropoutTrainLabels.csv")
df_test<-read.csv("Student Retention Challenge Data/Test Data/TestIDs.csv")

finance_test_clean<-read.csv("output data/finance_test_clean.csv")
finance_test_clean$StudentID <- as.numeric(finance_test_clean$StudentID)

static_test_clean<-read.csv("output data/static_test_clean.csv")
static_test_clean <- static_test_clean %>% select(-c(cohort, cohort.term))
progress_test_clean<-read.csv("output data/progress_test_clean.csv")
progress_test_clean <- progress_test_clean %>% select(-c(cohort, cohort.term))

finance_train_clean<-read.csv("output data/finance_train_clean.csv")
finance_train_clean$StudentID <- as.numeric(finance_train_clean$StudentID)
finance_train_clean <- finance_train_clean %>% select(-c(Dropout))

static_train_clean<-read.csv("output data/static_train_clean.csv")
static_train_clean <- static_train_clean %>% select(-c(Dropout,cohort, cohort.term))
progress_train_clean<-read.csv("output data/progress_train_clean.csv")
progress_train_clean <- progress_train_clean %>% select(-c(Dropout, cohort, cohort.term))

###### merge test set
df_test_clean<-merge(x=df_test,y=finance_test_clean,by="StudentID",all.x=TRUE)
df_test_clean<-merge(x=df_test_clean,y=static_test_clean,by="StudentID",all.x=TRUE)
df_test_clean<-merge(x=df_test_clean,y=progress_test_clean,by="StudentID",all.x=TRUE)

df_train_clean<-merge(x=df_label,y=finance_train_clean,by="StudentID",all.x=TRUE)
df_train_clean<-merge(x=df_train_clean,y=static_train_clean,by="StudentID",all.x=TRUE)
df_train_clean<-merge(x=df_train_clean,y=progress_train_clean,by="StudentID",all.x=TRUE)


write.csv(df_test_clean,file="output data/df_test_clean.csv",row.names = FALSE)
write.csv(df_train_clean,file="output data/df_train_clean.csv",row.names = FALSE)
```

```{r}
#Inspect the data by printing out the first and last few rows
head(df_train_clean)
tail(df_train_clean)
```

```{r}
#Correlation between final_GPA and Dropout
ggplot(df_train_clean) + aes(x = final_GPA, y = Dropout) + geom_point(colour = "#0c4c8a") + theme_minimal()
```

```{r}
#Bar chart to examine the distribution of a categorical variable
ggplot(data = df_train_clean) +
  geom_bar(mapping = aes(x = State))
```

```{r}
#Histogram to examine the distribution of Adjusted.Gross.Income
ggplot(data = df_train_clean) +
  geom_histogram(mapping = aes(x = Adjusted.Gross.Income), binwidth = 100000)
```

```{r}
#Chi-sqaure test for different race
#Hispanic and Dropout
test1 <- chisq.test(table(df_train_clean$Hispanic, df_train_clean$Dropout))
test1

#American Indian and Dropout
test2 <- chisq.test(table(df_train_clean$AmericanIndian, df_train_clean$Dropout))
test2

#Asian and Dropout
test3 <- chisq.test(table(df_train_clean$Asian, df_train_clean$Dropout))
test3

#Black and Dropout
test4 <- chisq.test(table(df_train_clean$Black, df_train_clean$Dropout))
test4

#NativeHawaiian and Dropout
test5 <- chisq.test(table(df_train_clean$NativeHawaiian, df_train_clean$Dropout))
test5

#White and Dropout
test6 <- chisq.test(table(df_train_clean$White, df_train_clean$Dropout))
test6

#TwoOrMoreRace and Dropout
test7 <- chisq.test(table(df_train_clean$TwoOrMoreRace, df_train_clean$Dropout))
test7
```

```{r}
df_train_clean$race[df_train_clean$Hispanic == 1] <- "Hispanic"
df_train_clean$race[df_train_clean$AmericanIndian == 1] <- "AmericanIndian"
df_train_clean$race[df_train_clean$Asian == 1] <- "Asian"
df_train_clean$race[df_train_clean$Black == 1] <- "Black"
df_train_clean$race[df_train_clean$NativeHawaiian == 1] <- "NativeHawaiian"
df_train_clean$race[df_train_clean$White == 1] <- "White"
df_train_clean$race[df_train_clean$TwoOrMoreRace == 1] <- "TwoOrMoreRace"
df_train_clean$race[df_train_clean$Unknown == 1] <- "Unknown"
df_train_clean$race[is.na(df_train_clean$race)] <- "Unknown"
```

```{r}
#Race and Dropout
test_1 <- chisq.test(table(df_train_clean$race, df_train_clean$Dropout))
test_1
```

To test the relationship between Dropout and different races, I did chi-square test, since it can be used to determine if two categorical variables are significant related with each other. From the results, we can find that the p-value of NativeHawaiian, Black, and Asian and smaller than 0.05, which are significant. And the p-value of TwoOrMoreRace, White, AmericanIndian, and Hispanic are larger than 0.05. And then I set a new column called "race", organized all the races into one column, and test the relationship between race and dropout by using chi-square test again. From the result, we can find that the p-value 1.009e-07 is mush smaller than 0.05.

```{r}
#Gender and Dropout
df_train_clean$Gender[df_train_clean$Gender == 1] <- "Male"
df_train_clean$Gender[df_train_clean$Gender == 2] <- "Female"

#df_train_clean$race[is.na(df_train_clean$race)] <- "Unknown"
```

```{r}
library(ggplot2)
##Check the distribution of Gender
ggplot(data.frame(df_train_clean$gender), aes(x=df_train_clean$Gender)) +
  geom_bar()
```

```{r}
nrow(df_train_clean[df_train_clean$Gender == 'Male', ])
nrow(df_train_clean[df_train_clean$Gender == 'Female', ])
```

```{r}
7314 / (4947+7314)
4947 / (4947+7314)
```

To check the distribution of gender, and the percentage of male and female, I made a plot and calculate the total number of rows with label Male and Female, and found that female contains approximately 60% of the gender, and male contains approximately 40% of the gender.

```{r}
test_2 <- chisq.test(table(df_train_clean$Gender, df_train_clean$Dropout))
test_2
```

To test the relationship between Dropout and Gender, I did chi-square test. From the result, we can find that the p-value 0.003014 is smaller than 0.05, which means the relationship between Gender and Dropout is significant.

```{r}
library(ggplot2)
##Check the distribution of Marital Status
ggplot(data.frame(df_train_clean$Marital.Status), aes(x=df_train_clean$Marital.Status)) +
  geom_bar()
```

```{r}
#Count the total number of each label
Divorced <- nrow(df_train_clean[df_train_clean$Marital.Status == 'Divorced', ])
Married <- nrow(df_train_clean[df_train_clean$Marital.Status == 'Married', ])
Separated <- nrow(df_train_clean[df_train_clean$Marital.Status == 'Separated', ])
Single <- nrow(df_train_clean[df_train_clean$Marital.Status == 'Single', ])
Unknown <- nrow(df_train_clean[df_train_clean$Marital.Status == 'Unknown', ])

Total <- Divorced + Married + Separated + Single + Unknown
Total
```

```{r}
#Calculate the percentage of each label
Divorced/Total
Married/Total
Separated/Total
Single/Total
Unknown/Total
```

To check the distribution of Marital Status, I drew a plot and calculate the percentage of each label in Marital Status. Based on the result, we can find that the percentage of Single is the largest, which has a large difference with Divorced, the smallest percentage. As the percentage of Single is larger than the total of rest labels, we can conclude that the majority of Marital Status is Single.

```{r}
#Marital.Status and Dropout
test_3 <- chisq.test(table(df_train_clean$Marital.Status, df_train_clean$Dropout))
test_3
```

To test the relationship between Dropout and Gender, I did chi-square test. From the result, we can find that the p-value is smaller than 2.2e-16, which is much smaller than 0.05. Thus, the relationship between Gender and Dropout is significant.

```{r}
#Housing and Dropout
test_4 <- chisq.test(table(df_train_clean$Housing, df_train_clean$Dropout))
test_4
```

To test the relationship between Dropout and Housing, I did chi-square test. From the result, we can find that the p-value \< 2.2e-16, which is much smaller than 0.05. Thus, the relationship between Housing and Dropout is significant.

```{r}
#Check the distribution of Father.s.Highest.Grade.Level
ggplot(data.frame(df_train_clean$MathPlacement), aes(x=df_train_clean$MathPlacement)) +
  geom_bar()
```

```{r}
#Marital.Status and Dropout
test_5 <- chisq.test(table(df_train_clean$MathPlacement, df_train_clean$Dropout))
test_5
```

```{r}
#Check the distribution of Father.s.Highest.Grade.Level
ggplot(data.frame(df_train_clean$Housing), aes(x=df_train_clean$Housing)) +
  geom_bar()
```

Conclusion:

As we want to predict Dropout based on multiple variables, we can use logistic regression to do so. Dropout is binary, since it has two outputs: 0 or 1.Logistic regression can be used for binary classification problems and model the probability of a certain event.

```{r}
df_train_clean$Dropout <- as.factor(df_train_clean$Dropout)
df_train_clean$Gender<- as.factor(df_train_clean$Gender)
df_train_clean$race <- as.factor(df_train_clean$race)
df_train_clean$MathPlacement <- as.factor(df_train_clean$MathPlacement)
df_train_clean$Housing <- as.factor(df_train_clean$Housing)
df_train_clean$Marital.Status <- as.factor(df_train_clean$Marital.Status)
df_train_clean$Father.s.Highest.Grade.Level <- as.factor(df_train_clean$Father.s.Highest.Grade.Level)
df_train_clean$Mother.s.Highest.Grade.Level <- as.factor(df_train_clean$Mother.s.Highest.Grade.Level)                                                       
#class(df_train_clean$final_GPA)
#levels(df_train_clean$final_GPA)
```

```{r}
library(ISLR2)
library(caret)
library(readr)
library(dplyr)
library(readr)
library(tidyverse)
library(lattice)
set.seed(1234)
intrain <- createDataPartition(df_train_clean$Dropout,p=0.75,list = FALSE)
train <- df_train_clean[intrain,]
test <- df_train_clean[-intrain,]
```

```{r}
trctrl <- trainControl(method = "cv",
                     number = 10,
                     classProbs = T,
                     )
```

```{r}
#Fit a logistic regression model to the training set
#father & mother education level, engplacement降低, final_GPA有问题
logitmodel <- train(Dropout ~ race+Gender+MathPlacement+Housing+Marital.Status,method='glm',
                preProcess=c('scale', 'center'), 
                data=train, 
                family=binomial(link='logit'))

summary(logitmodel)
```

```{r}
#Predict the model
predictions <- predict(logitmodel, newdata = test)

#Check the accuracy, specificity, sensitivity, and F measure
confusionMatrix(predictions,test$Dropout)
F_meas(predictions,test$Dropout)
```

The `echo: false` option disables the printing of code (only output is displayed).
